"use strict";(self.webpackChunkcreate_project_docs=self.webpackChunkcreate_project_docs||[]).push([[7349],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>f});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=i.createContext({}),l=function(e){var t=i.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=l(e.components);return i.createElement(c.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=l(n),m=a,f=p["".concat(c,".").concat(m)]||p[m]||u[m]||o;return n?i.createElement(f,r(r({ref:t},d),{},{components:n})):i.createElement(f,r({ref:t},d))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,r=new Array(o);r[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[p]="string"==typeof e?e:a,r[1]=s;for(var l=2;l<o;l++)r[l]=n[l];return i.createElement.apply(null,r)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8614:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var i=n(7462),a=(n(7294),n(3905));const o={sidebar_position:1,description:"What should be in this section."},r="Design Document - Part II API",s={unversionedId:"api-specification/design-api-intro",id:"api-specification/design-api-intro",title:"Design Document - Part II API",description:"What should be in this section.",source:"@site/docs/api-specification/design-api-intro.md",sourceDirName:"api-specification",slug:"/api-specification/design-api-intro",permalink:"/project-lomo-in-person-gaming-app/docs/api-specification/design-api-intro",draft:!1,editUrl:"https://github.com/Capstone-Projects-2023-Fall/project-lomo-in-person-gaming-app/edit/main/documentation/docs/api-specification/design-api-intro.md",tags:[],version:"current",lastUpdatedBy:"Andy Olshansky",sidebarPosition:1,frontMatter:{sidebar_position:1,description:"What should be in this section."},sidebar:"docsSidebar",previous:{title:"API Specification",permalink:"/project-lomo-in-person-gaming-app/docs/category/api-specification"},next:{title:"API 1 - Swagger Petstore",permalink:"/project-lomo-in-person-gaming-app/docs/api-specification/openapi-spec"}},c={},l=[{value:"Users Class",id:"users-class",level:2},{value:"This will include a method to POST a user, a method to get all users, and a method to get a specific user by user_id",id:"this-will-include-a-method-to-post-a-user-a-method-to-get-all-users-and-a-method-to-get-a-specific-user-by-user_id",level:3},{value:"Beacon Class",id:"beacon-class",level:2},{value:"This will include a POST, a GET by beacon_id, and a GET by location (i.e. distance from a spot)",id:"this-will-include-a-post-a-get-by-beacon_id-and-a-get-by-location-ie-distance-from-a-spot",level:3}],d={toc:l};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,i.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"design-document---part-ii-api"},"Design Document - Part II API"),(0,a.kt)("h1",{id:"json-overview"},"JSON Overview"),(0,a.kt)("h1",{id:"this-will-likely-be-changed-as-we-hammer-out-the-details--decide-how-we-want-to-do-this"},"This will likely be changed as we hammer out the details / decide how we want to do this"),(0,a.kt)("h2",{id:"users-class"},"Users Class"),(0,a.kt)("h3",{id:"this-will-include-a-method-to-post-a-user-a-method-to-get-all-users-and-a-method-to-get-a-specific-user-by-user_id"},"This will include a method to POST a user, a method to get all users, and a method to get a specific user by user_id"),(0,a.kt)("p",null,'"Users": { // Class for the users\n"user_id": int, // Unique identifier\n"email": "", // Registration\n"username": "", // Public identifier\n"password": "", // 3 guesses\n"first_name": "", // Registration (do we need this?)\n"last_name": "", // Registration (do we need this?)\n"profile": { // public information, filters, accountability\n\u2003"about me": "",\n"profile_pic": ""\n\u2003"beacons_hosted": ',"[{beacon_id}]",',\n\u2003"beacons_attended": ',"[{beacon_id}]",',\n\u2003"preferred_games":"",\n\u2003"preference_tags":"",\n},\n"friends": ',"[{user_id}, {}]","\n}"),(0,a.kt)("h2",{id:"beacon-class"},"Beacon Class"),(0,a.kt)("h3",{id:"this-will-include-a-post-a-get-by-beacon_id-and-a-get-by-location-ie-distance-from-a-spot"},"This will include a POST, a GET by beacon_id, and a GET by location (i.e. distance from a spot)"),(0,a.kt)("p",null,'"Beacons": {\n"beacon_id": int, // Unique identifier\n"host_id": "", // user_id of the User\n"title": "", // What is going to happen at the event (doubles practice, mario wonder, pokemans vgc, etc.)\n"game": {\n"game_title": "",\n"game_image": ""\n}\n"date": "",\n"time": "",\n"location":  {\n"description": "", // Address / Name of place\n"latitude": float, // For the map\n"longitude": float // For the map\n\u2003},\n"players_needed": int, // Amount of players wanted\n"players_attending": ',"[{user_id}]",', // List of players attended\n"comments": { // A place of intelligent discussion and detailed politics\n"comment_id": int, // Unique identifier\n"beacon_id": int, // What beacon its connected to\n"user_id" :int, // user_id of the commenter\n"body": "", // The comment\n"timestamp: "" // Timestamp\n}\n}'))}p.isMDXComponent=!0}}]);