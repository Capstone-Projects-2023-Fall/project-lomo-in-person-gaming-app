"use strict";(self.webpackChunkcreate_project_docs=self.webpackChunkcreate_project_docs||[]).push([[9975],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),d=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=d(e.components);return a.createElement(l.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=d(n),m=o,h=p["".concat(l,".").concat(m)]||p[m]||u[m]||r;return n?a.createElement(h,i(i({ref:t},c),{},{components:n})):a.createElement(h,i({ref:t},c))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:o,i[1]=s;for(var d=2;d<r;d++)i[d]=n[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2810:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>s,toc:()=>d});var a=n(7462),o=(n(7294),n(3905));const r={sidebar_position:4,description:"How to connect frontend and backend"},i="Frontend API Integration",s={unversionedId:"api-specification/frontend-integration",id:"api-specification/frontend-integration",title:"Frontend API Integration",description:"How to connect frontend and backend",source:"@site/docs/api-specification/frontend-integration.md",sourceDirName:"api-specification",slug:"/api-specification/frontend-integration",permalink:"/project-lomo-in-person-gaming-app/docs/api-specification/frontend-integration",draft:!1,editUrl:"https://github.com/Capstone-Projects-2023-Fall/project-lomo-in-person-gaming-app/edit/main/documentation/docs/api-specification/frontend-integration.md",tags:[],version:"current",lastUpdatedBy:"JonathanAltenburg",sidebarPosition:4,frontMatter:{sidebar_position:4,description:"How to connect frontend and backend"},sidebar:"docsSidebar",previous:{title:"Backend API Endpoints",permalink:"/project-lomo-in-person-gaming-app/docs/api-specification/backend-api-endpoints"},next:{title:"Test Procedures",permalink:"/project-lomo-in-person-gaming-app/docs/category/test-procedures"}},l={},d=[{value:"Making API Calls",id:"making-api-calls",level:2},{value:"JSON Overview",id:"json-overview",level:2},{value:"Users JSON data",id:"users-json-data",level:3},{value:"Beacon JSON data",id:"beacon-json-data",level:3},{value:"Reports JSON data",id:"reports-json-data",level:3},{value:"Data Flow",id:"data-flow",level:2},{value:"HTTP requests",id:"http-requests",level:3},{value:"WebSockets",id:"websockets",level:3}],c={toc:d};function p(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"frontend-api-integration"},"Frontend API Integration"),(0,o.kt)("p",null,"This section documents frontend API calls to the backend and explains how the frontend and backend are connected."),(0,o.kt)("p",null,"Laravel is used as the API backend and acts as the middleman to move data between the frontend and the database. Please refer to the ",(0,o.kt)("a",{parentName:"p",href:"/docs/api-specification/backend-api-endpoints/"},"Backend API Endpoints")," documentation for the the specific API endpoints and requests."),(0,o.kt)("h2",{id:"making-api-calls"},"Making API Calls"),(0,o.kt)("p",null,"API calls from the frontend are made inside the ",(0,o.kt)("inlineCode",{parentName:"p"},"useEffect()")," hook in React. For more information on React State, please refer to the ",(0,o.kt)("a",{parentName:"p",href:"https://react.dev/"},"official React documentations"),"."),(0,o.kt)("p",null,"Below is a basic 'hello world' example of how to make an API call from a component:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'// MyComponent.js\n\nimport { useEffect, useState } from \'react\'\n\nfunction MyComponent() => {\n    const [hello, setHello] = useState("hello");\n\n    useEffect(() => {\n        // http request options \n        var requestOptions = {\n            method: \'GET\',\n            headers: {\n                "Accept": "application/json" // MUST SEND WITH THIS\n            },\n        };\n        \n        // call the API using fetch, a builtin http-request package\n        // if we use a different http-request package, we can just use that\n        // the point is that api calls must be in the useEffect() function\n        fetch("http://localhost/api/hello", requestOptions)\n            .then(response => response.json())\n            .then(response => {\n                let message = JSON.stringify(response.message);\n                console.log(message);\n                setHello(message);\n            })\n            .catch(error => console.log(\'error\', error));\n    }, []);\n\n    return (\n        <>\n            {hello} // display the response\n        </>\n    )\n}\nexport default MyComponent\n')),(0,o.kt)("h2",{id:"json-overview"},"JSON Overview"),(0,o.kt)("p",null,"A complete list of all acceptable fields for the JSON data."),(0,o.kt)("h3",{id:"users-json-data"},"Users JSON data"),(0,o.kt)("p",null,"This JSON schema is used by the ",(0,o.kt)("inlineCode",{parentName:"p"},"/api/users")," endpoint."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'"Users": { // JSON data for Users\n  "user_id": int, // Unique identifier\n  "email": "", // Registration\n  "username": "", // Public identifier\n  "password": "", // 3 guesses\n  "first_name": "", // Registration (do we need this?)\n  "last_name": "", // Registration (do we need this?)\n  "profile": { // public information, filters, accountability\n   \u2003"about me": "",\n    "profile_pic": ""\n   \u2003"beacons_hosted": [{Beacons.beacon_id, Beacons.title, Beacons.image}, {}],\n   \u2003"beacons_attended": [{Beacons.beacon_id, Beacons.title, Beacons.image}. {}],\n   \u2003"preferred_games":"",\n   \u2003"preference_tags":"",\n  },\n  "friends": [{Users.user_id, Users.profile.profile_pic, Users.username}, {}]\n}\n')),(0,o.kt)("h3",{id:"beacon-json-data"},"Beacon JSON data"),(0,o.kt)("p",null,"This JSON schema is used by the ",(0,o.kt)("inlineCode",{parentName:"p"},"/api/beacons")," endpoint."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'"Beacons": {\n  "beacon_id": int, // Unique identifier\n  "host_id": "", // user_id of the User\n  "title": "", // What is going to happen at the event (doubles practice, mario wonder, pokemans vgc, etc.)\n  "game": {\n    "game_title": "",\n    "game_image": ""\n  },\n  "description": "", // more information about the event\n  "date_time": Date, // date and time \n  "location":  {\n    "description": "", // Address / Name of place\n    "latitude": float, // For the map\n    "longitude": float // For the map\n  \u2003},\n  "players_needed": int, // Amount of players wanted\n  "players_attending": [{Users.user_id, Users.profile.profile_pic, Users.username}, {}], // List of players attended\n  "comments": { // A place of intelligent discussion and detailed politics\n    "comment_id": int, // Unique identifier\n    "beacon_id": int, // What beacon its connected to\n    "user_id": int, // user_id of the commenter\n    "body": "", // The comment\n    "timestamp: Date // Timestamp\n  }\n}\n')),(0,o.kt)("h3",{id:"reports-json-data"},"Reports JSON data"),(0,o.kt)("p",null,"This JSON schema is used by the ",(0,o.kt)("inlineCode",{parentName:"p"},"/api/reports")," endpoint."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'"Reports": {\n  "report_id": int, // Unique Identifier\n  "reportee_id": "", // the user making the report\n  "reported_id": "", // the user being reported\n  "body": "", // reason why they\'re being reported\n  "timestamp: Date // timestamp\n}\n')),(0,o.kt)("h2",{id:"data-flow"},"Data Flow"),(0,o.kt)("p",null,"This sections describes how the data flows from the frontend to backend to database and back."),(0,o.kt)("p",null,"The app uses a combination of HTTP requests and WebSockets to send and receive requests."),(0,o.kt)("p",null,"Beacon data, such as the creation of a beacon or the creation of a comment, would use WebSockets to push real-time updates."),(0,o.kt)("p",null,"Every other data will use HTTP Requests to send and receive data."),(0,o.kt)("h3",{id:"http-requests"},"HTTP requests"),(0,o.kt)("p",null,"Most of the data sent between frontend and database will be through HTTP requests. The sequence diagram below shows an example of how a an HTTP request sent from the frontend would be handled in the backend and then pushed to the database and eventually returned to the frontend."),(0,o.kt)("p",null,"The API backend for HTTP requests uses 3 classes to move data: API Middleware, Controller, and Model."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The API middleware creates the API routes and authenticates them through the Laravel Sanctum middleware."),(0,o.kt)("li",{parentName:"ul"},"The Controller uses an instance of the Model class to read and write to the database."),(0,o.kt)("li",{parentName:"ul"},"The Model class defines an object class for each database collection.")),(0,o.kt)("mermaid",{value:"sequenceDiagram\n  participant Frontend\n  participant API Middleware\n  participant Controller\n  participant Model\n  participant Database\n\n  Frontend->>API Middleware: Sends an HTTP request with token\n  activate API Middleware\n  \n  API Middleware->>Controller: Successfully authenticates the token<br>Sends request to associated function\n  deactivate API Middleware\n  activate Controller\n\n  Controller->>Model: Creates a new Model object\n  activate Model\n  Model--\x3e>Controller: Returns a new Model instance\n  deactivate Model\n\n  Controller->>Database: Use Model object to access database\n  activate Database\n  Database--\x3e>Controller: Returns data\n  deactivate Database\n  \n  Controller--\x3e>Frontend: Returns data\n  deactivate Controller"}),(0,o.kt)("h3",{id:"websockets"},"WebSockets"),(0,o.kt)("p",null,"When a new beacon or a new comment is created, that data will be added into the database from HTTP requests and then RETURN to the frontend THROUGH the WebSocket."),(0,o.kt)("p",null,"Or it can just create a beacon through the WebSocket and then broadcast that change to all users through the WebSocket."),(0,o.kt)("mermaid",{value:"sequenceDiagram\n  participant Frontend\n  participant API Middleware\n  participant Controller\n  participant Model\n  participant Database\n  participant Event\n  participant Event Listener\n\n  Frontend->>API Middleware: Sends a POST request with token\n  activate API Middleware\n  \n  API Middleware->>Controller: Successfully authenticates the token<br>Sends request to associated function\n  deactivate API Middleware\n  activate Controller\n\n  Controller->>Model: Creates a new Model object\n  activate Model\n  Model--\x3e>Controller: Returns a new Model instance\n  deactivate Model\n\n  Controller->>Database: Use Model object to create data\n  activate Database\n  Database--\x3e>Controller: Returns successfully created\n  deactivate Database\n  \n  Controller->>Event: Calls Event->broadcastWith() function\n  deactivate Controller\n  activate Event\n  Event->>Event Listener: Automatically calls handle() function\n  deactivate Event\n  activate Event Listener\n  Event Listener->>Frontend: Sends newly created beacon data through WebSocket\n  deactivate Event Listener\n\n  Frontend->>Frontend: Displays newly create beacon in real time"}))}p.isMDXComponent=!0}}]);