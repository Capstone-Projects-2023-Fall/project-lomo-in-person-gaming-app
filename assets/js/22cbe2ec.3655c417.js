"use strict";(self.webpackChunkcreate_project_docs=self.webpackChunkcreate_project_docs||[]).push([[8672],{3905:(e,t,s)=>{s.d(t,{Zo:()=>u,kt:()=>b});var n=s(67294);function a(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}function r(e,t){var s=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),s.push.apply(s,n)}return s}function o(e){for(var t=1;t<arguments.length;t++){var s=null!=arguments[t]?arguments[t]:{};t%2?r(Object(s),!0).forEach((function(t){a(e,t,s[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(s)):r(Object(s)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(s,t))}))}return e}function i(e,t){if(null==e)return{};var s,n,a=function(e,t){if(null==e)return{};var s,n,a={},r=Object.keys(e);for(n=0;n<r.length;n++)s=r[n],t.indexOf(s)>=0||(a[s]=e[s]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)s=r[n],t.indexOf(s)>=0||Object.prototype.propertyIsEnumerable.call(e,s)&&(a[s]=e[s])}return a}var l=n.createContext({}),c=function(e){var t=n.useContext(l),s=t;return e&&(s="function"==typeof e?e(t):o(o({},t),e)),s},u=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var s=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=c(s),m=a,b=p["".concat(l,".").concat(m)]||p[m]||d[m]||r;return s?n.createElement(b,o(o({ref:t},u),{},{components:s})):n.createElement(b,o({ref:t},u))}));function b(e,t){var s=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=s.length,o=new Array(r);o[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[p]="string"==typeof e?e:a,o[1]=i;for(var c=2;c<r;c++)o[c]=s[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,s)}m.displayName="MDXCreateElement"},53751:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var n=s(87462),a=(s(67294),s(3905));const r={sidebar_position:2},o="Backend Unit Tests",i={unversionedId:"testing/backend-unit-testing",id:"testing/backend-unit-testing",title:"Backend Unit Tests",description:"Laravel uses the built-in PHPUnit testing framework to create and run all tests.",source:"@site/docs/testing/backend-unit-testing.md",sourceDirName:"testing",slug:"/testing/backend-unit-testing",permalink:"/project-lomo-in-person-gaming-app/docs/testing/backend-unit-testing",draft:!1,editUrl:"https://github.com/Capstone-Projects-2023-Fall/project-lomo-in-person-gaming-app/edit/main/documentation/docs/testing/backend-unit-testing.md",tags:[],version:"current",lastUpdatedBy:"Jennifer Lieu",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"docsSidebar",previous:{title:"Frontend Unit Tests",permalink:"/project-lomo-in-person-gaming-app/docs/testing/frontend-unit-testing"},next:{title:"Integration tests",permalink:"/project-lomo-in-person-gaming-app/docs/testing/integration-testing"}},l={},c=[{value:"Test Coverage",id:"test-coverage",level:2},{value:"Tests",id:"tests",level:2},{value:"BeaconControllerTest",id:"beaconcontrollertest",level:3},{value:"Test: POST request to api/beacons is successful",id:"test-post-request-to-apibeacons-is-successful",level:4},{value:"Test: POST request to api/beacons fails when required fields are empty",id:"test-post-request-to-apibeacons-fails-when-required-fields-are-empty",level:4},{value:"Test: GET request to api/beacons is successful",id:"test-get-request-to-apibeacons-is-successful",level:4},{value:"Test: BeaconCreated Event is dispatched successfully",id:"test-beaconcreated-event-is-dispatched-successfully",level:4},{value:"UserControllerTest",id:"usercontrollertest",level:3},{value:"Test: GET request to api/users is successful",id:"test-get-request-to-apiusers-is-successful",level:4},{value:"DatabaseConnectionTest",id:"databaseconnectiontest",level:3},{value:"Test: Database connection to the testing database",id:"test-database-connection-to-the-testing-database",level:4},{value:"Test: Database connection to the production database",id:"test-database-connection-to-the-production-database",level:4},{value:"GameControllerTest",id:"gamecontrollertest",level:3},{value:"Test: IGDB API to get games by name, GET request to api/games is successful",id:"test-igdb-api-to-get-games-by-name-get-request-to-apigames-is-successful",level:4}],u={toc:c},p="wrapper";function d(e){let{components:t,...s}=e;return(0,a.kt)(p,(0,n.Z)({},u,s,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"backend-unit-tests"},"Backend Unit Tests"),(0,a.kt)("p",null,"Laravel uses the built-in ",(0,a.kt)("a",{parentName:"p",href:"https://phpunit.de/"},"PHPUnit testing framework")," to create and run all tests."),(0,a.kt)("p",null,"Backend tests are automated by Github Actions and run every time a new pull request is made into the main branch."),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/Capstone-Projects-2023-Fall/project-lomo-in-person-gaming-app/actions/workflows/test-backend.yml"},(0,a.kt)("img",{parentName:"a",src:"https://github.com/Capstone-Projects-2023-Fall/project-lomo-in-person-gaming-app/actions/workflows/test-backend.yml/badge.svg",alt:"Test Backend"}))),(0,a.kt)("h2",{id:"test-coverage"},"Test Coverage"),(0,a.kt)("p",null,"Results printed from the ",(0,a.kt)("inlineCode",{parentName:"p"},"sail artisan test --coverage")," command. "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Console/Kernel ............................... 16 / 66.7%  \n  Exceptions/Handler ............................... 100.0%  \n  Http/Controllers/BeaconController .... 16, 43..59 / 55.6%  \n  Http/Controllers/Controller ...................... 100.0%  \n  Http/Controllers/PostController .................... 0.0%  \n  Http/Controllers/UserController .................... 0.0%  \n  Http/Kernel ...................................... 100.0%  \n  Http/Middleware/Authenticate ....................... 0.0%  \n  Http/Middleware/EncryptCookies ................... 100.0%  \n  Http/Middleware/PreventRequestsDuringMaintenance . 100.0%  \n  Http/Middleware/RedirectIfAuthenticated ............ 0.0%  \n  Http/Middleware/TrimStrings ...................... 100.0%  \n  Http/Middleware/TrustHosts ......................... 0.0%  \n  Http/Middleware/TrustProxies ..................... 100.0%  \n  Http/Middleware/ValidateSignature ................ 100.0%  \n  Http/Middleware/VerifyCsrfToken .................. 100.0%  \n  Models/Beacon .................................... 100.0%  \n  Models/Post ...................................... 100.0%  \n  Models/User ...................................... 100.0%  \n  Providers/AppServiceProvider ..................... 100.0%  \n  Providers/AuthServiceProvider .................... 100.0%  \n  Providers/BroadcastServiceProvider ................. 0.0%  \n  Providers/EventServiceProvider ................... 100.0%  \n  Providers/RouteServiceProvider ................... 100.0%  \n  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n                                              Total: 41.4 %  \n")),(0,a.kt)("h2",{id:"tests"},"Tests"),(0,a.kt)("h3",{id:"beaconcontrollertest"},"BeaconControllerTest"),(0,a.kt)("h4",{id:"test-post-request-to-apibeacons-is-successful"},"Test: POST request to api/beacons is successful"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"test_post_beacon_request_returns_successful_response()")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Assert: HTTP status code 201 for successful resource creation")),(0,a.kt)("h4",{id:"test-post-request-to-apibeacons-fails-when-required-fields-are-empty"},"Test: POST request to api/beacons fails when required fields are empty"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"test_post_beacon_request_fails_when_required_fields_are_empty()")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Assert: HTTP status code 422 for unprocessable entity")),(0,a.kt)("h4",{id:"test-get-request-to-apibeacons-is-successful"},"Test: GET request to api/beacons is successful"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"test_get_all_beacons()")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Assert: HTTP status code 200 for successful response")),(0,a.kt)("h4",{id:"test-beaconcreated-event-is-dispatched-successfully"},"Test: BeaconCreated Event is dispatched successfully"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"test_beacon_created_event_dispatched()")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Assert: Dispatched is true")),(0,a.kt)("h3",{id:"usercontrollertest"},"UserControllerTest"),(0,a.kt)("h4",{id:"test-get-request-to-apiusers-is-successful"},"Test: GET request to api/users is successful"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"test_get_all_users()")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Assert: HTTP status code 200 for successful response")),(0,a.kt)("h3",{id:"databaseconnectiontest"},"DatabaseConnectionTest"),(0,a.kt)("h4",{id:"test-database-connection-to-the-testing-database"},"Test: Database connection to the testing database"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"test_database_connection_to_testing_schema()")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Assert: Connection established")),(0,a.kt)("h4",{id:"test-database-connection-to-the-production-database"},"Test: Database connection to the production database"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"test_database_connection_to_public_schema()")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Assert: Connection established")),(0,a.kt)("h3",{id:"gamecontrollertest"},"GameControllerTest"),(0,a.kt)("h4",{id:"test-igdb-api-to-get-games-by-name-get-request-to-apigames-is-successful"},"Test: IGDB API to get games by name, GET request to api/games is successful"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"test_get_games_by_name()")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Assert: ",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"HTTP status code 200 for successful response"),(0,a.kt)("li",{parentName:"ul"},"Expecte JSON returned")))))}d.isMDXComponent=!0}}]);